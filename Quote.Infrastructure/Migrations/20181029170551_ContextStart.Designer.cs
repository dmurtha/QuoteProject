// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quote.Infrastructure.Data;

namespace Quote.Infrastructure.Migrations
{
    [DbContext(typeof(ClientDBContext))]
    [Migration("20181029170551_ContextStart")]
    partial class ContextStart
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Quote.Core.Entities.Client.AddressLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientAddressId");

                    b.Property<string>("ClientAddressType")
                        .IsRequired()
                        .HasColumnType("nvarchar(35)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ClientAddressId");

                    b.ToTable("ClientAddressLevels");

                    b.HasData(
                        new { Id = 1, ClientAddressId = 1, ClientAddressType = "AdditionalOffice" },
                        new { Id = 2, ClientAddressId = 1, ClientAddressType = "HeadOffice" },
                        new { Id = 3, ClientAddressId = 2, ClientAddressType = "AdditionalOffice" },
                        new { Id = 4, ClientAddressId = 2, ClientAddressType = "HeadOffice" },
                        new { Id = 5, ClientAddressId = 3, ClientAddressType = "AdditionalOffice" },
                        new { Id = 6, ClientAddressId = 3, ClientAddressType = "HeadOffice" },
                        new { Id = 7, ClientAddressId = 4, ClientAddressType = "AdditionalOffice" },
                        new { Id = 8, ClientAddressId = 4, ClientAddressType = "HeadOffice" },
                        new { Id = 9, ClientAddressId = 5, ClientAddressType = "AdditionalOffice" },
                        new { Id = 10, ClientAddressId = 5, ClientAddressType = "HeadOffice" },
                        new { Id = 11, ClientAddressId = 6, ClientAddressType = "AdditionalOffice" },
                        new { Id = 12, ClientAddressId = 6, ClientAddressType = "HeadOffice" },
                        new { Id = 13, ClientAddressId = 7, ClientAddressType = "AdditionalOffice" },
                        new { Id = 14, ClientAddressId = 7, ClientAddressType = "HeadOffice" },
                        new { Id = 15, ClientAddressId = 8, ClientAddressType = "AdditionalOffice" },
                        new { Id = 16, ClientAddressId = 8, ClientAddressType = "HeadOffice" },
                        new { Id = 17, ClientAddressId = 9, ClientAddressType = "AdditionalOffice" },
                        new { Id = 18, ClientAddressId = 8, ClientAddressType = "HeadOffice" }
                    );
                });

            modelBuilder.Entity("Quote.Core.Entities.Client.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ClientGuid");

                    b.Property<string>("ClientName");

                    b.Property<string>("ClientType")
                        .IsRequired()
                        .HasColumnType("nvarchar(35)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new { Id = 1, ClientGuid = new Guid("bd0faefa-70c4-4e56-a320-179d5f44430b"), ClientName = "Texas Location Travels", ClientType = "Location" },
                        new { Id = 2, ClientGuid = new Guid("f218dff4-dbca-4599-a0c8-3d1ad62b0f4a"), ClientName = "Texas Agency Travels", ClientType = "Agency" },
                        new { Id = 3, ClientGuid = new Guid("8cfa11fb-258d-4074-a5ca-89ab738ab324"), ClientName = "Texas Master Agency Travels", ClientType = "MasterAgency" },
                        new { Id = 4, ClientGuid = new Guid("2e9b2059-2a5e-494d-93f1-82c81c645dde"), ClientName = "Kansas Location Travels", ClientType = "Location" },
                        new { Id = 5, ClientGuid = new Guid("342ac1e0-13a1-4a38-a80e-11c911abfb7a"), ClientName = "Kansas Agency Travels", ClientType = "Agency" },
                        new { Id = 6, ClientGuid = new Guid("5d9f2d73-6f9b-48df-8930-98bc59c89f8b"), ClientName = "Kansas Master Agency Travels", ClientType = "MasterAgency" },
                        new { Id = 7, ClientGuid = new Guid("b9546750-d21b-43e3-a10c-3461225a56e0"), ClientName = "Colorado Location Travels", ClientType = "Location" },
                        new { Id = 8, ClientGuid = new Guid("745a4c13-6892-4df6-9324-a2ac8ecd54fa"), ClientName = "Colorado Agency Travels", ClientType = "Agency" },
                        new { Id = 9, ClientGuid = new Guid("5440a77a-2830-4255-bafd-a03af7ff6332"), ClientName = "Colorado Master Agency Travels", ClientType = "MasterAgency" }
                    );
                });

            modelBuilder.Entity("Quote.Core.Entities.Client.ClientAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressName");

                    b.Property<string>("AddressStreet");

                    b.Property<string>("Apt");

                    b.Property<string>("City");

                    b.Property<int>("ClientId");

                    b.Property<string>("Country");

                    b.Property<string>("State");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("ClientAddresses");

                    b.HasData(
                        new { Id = 1, AddressName = "Texas Address", AddressStreet = "123 Texas Lane", Apt = "1", City = "Houston", ClientId = 1, Country = "USA", State = "TX", ZipCode = "12345" },
                        new { Id = 2, AddressName = "Texas Address", AddressStreet = "123 Texas Lane", Apt = "1", City = "Houston", ClientId = 2, Country = "USA", State = "TX", ZipCode = "12345" },
                        new { Id = 3, AddressName = "Texas Address", AddressStreet = "123 Texas Lane", Apt = "1", City = "Houston", ClientId = 3, Country = "USA", State = "TX", ZipCode = "12345" },
                        new { Id = 4, AddressName = "Kansas Address", AddressStreet = "123 Kansas Lane", Apt = "1", City = "Derby", ClientId = 4, Country = "USA", State = "KS", ZipCode = "12345" },
                        new { Id = 5, AddressName = "Kansas Address", AddressStreet = "123 Kansas Lane", Apt = "1", City = "Wichita", ClientId = 5, Country = "USA", State = "KS", ZipCode = "12345" },
                        new { Id = 6, AddressName = "Kansas Address", AddressStreet = "123 Kansas Lane", Apt = "1", City = "Wichita", ClientId = 6, Country = "USA", State = "KS", ZipCode = "12345" },
                        new { Id = 7, AddressName = "Colorado Address", AddressStreet = "123 Colorado Lane", Apt = "1", City = "Houston", ClientId = 7, Country = "USA", State = "TX", ZipCode = "12345" },
                        new { Id = 8, AddressName = "Colorado Address", AddressStreet = "123 Colorado Lane", Apt = "1", City = "Denver", ClientId = 8, Country = "USA", State = "CO", ZipCode = "12345" },
                        new { Id = 9, AddressName = "Colorado Address", AddressStreet = "123 Colorado Lane", Apt = "1", City = "Denver", ClientId = 9, Country = "USA", State = "CO", ZipCode = "12345" }
                    );
                });

            modelBuilder.Entity("Quote.Core.Entities.Client.ClientClientPhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientContactId");

                    b.Property<int>("ClientId");

                    b.Property<int>("PhoneNumber");

                    b.Property<string>("PhoneType")
                        .IsRequired()
                        .HasColumnType("nvarchar(35)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ClientContactId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientClientPhones");
                });

            modelBuilder.Entity("Quote.Core.Entities.Client.ClientContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientFistName");

                    b.Property<int>("ClientId");

                    b.Property<string>("ClientLastName");

                    b.Property<string>("ClientTitle");

                    b.Property<string>("EmailAddress");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientContacts");
                });

            modelBuilder.Entity("Quote.Core.Entities.Client.ClientContactLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClientContactId");

                    b.Property<int?>("ClientContactId1");

                    b.Property<string>("ClientContactType")
                        .IsRequired()
                        .HasColumnType("nvarchar(35)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ClientContactId1");

                    b.ToTable("ClientContactTypes");
                });

            modelBuilder.Entity("Quote.Core.Entities.Client.ClientContactPhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClientContactId");

                    b.Property<int?>("ClientContactId1");

                    b.Property<int>("PhoneNumber");

                    b.Property<string>("PhoneType")
                        .IsRequired()
                        .HasColumnType("nvarchar(35)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ClientContactId1");

                    b.ToTable("ClientContactPhones");
                });

            modelBuilder.Entity("Quote.Core.Entities.Client.ClientParent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<int>("ParentId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("ClientParents");
                });

            modelBuilder.Entity("Quote.Core.Entities.Client.AddressLevel", b =>
                {
                    b.HasOne("Quote.Core.Entities.Client.ClientAddress", "ClientAddress")
                        .WithMany("ClientAddressLevels")
                        .HasForeignKey("ClientAddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Quote.Core.Entities.Client.ClientAddress", b =>
                {
                    b.HasOne("Quote.Core.Entities.Client.Client", "Client")
                        .WithOne("ClientAddress")
                        .HasForeignKey("Quote.Core.Entities.Client.ClientAddress", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Quote.Core.Entities.Client.ClientClientPhone", b =>
                {
                    b.HasOne("Quote.Core.Entities.Client.ClientContact")
                        .WithMany("ClientPhones")
                        .HasForeignKey("ClientContactId");

                    b.HasOne("Quote.Core.Entities.Client.Client", "Client")
                        .WithMany("ClientPhones")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Quote.Core.Entities.Client.ClientContact", b =>
                {
                    b.HasOne("Quote.Core.Entities.Client.Client", "Client")
                        .WithMany("ClientContacts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Quote.Core.Entities.Client.ClientContactLevel", b =>
                {
                    b.HasOne("Quote.Core.Entities.Client.ClientContact", "ClientContact")
                        .WithMany("ClientContactTypes")
                        .HasForeignKey("ClientContactId1");
                });

            modelBuilder.Entity("Quote.Core.Entities.Client.ClientContactPhone", b =>
                {
                    b.HasOne("Quote.Core.Entities.Client.ClientContact", "ClientContact")
                        .WithMany()
                        .HasForeignKey("ClientContactId1");
                });

            modelBuilder.Entity("Quote.Core.Entities.Client.ClientParent", b =>
                {
                    b.HasOne("Quote.Core.Entities.Client.Client")
                        .WithOne("ClientParent")
                        .HasForeignKey("Quote.Core.Entities.Client.ClientParent", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
